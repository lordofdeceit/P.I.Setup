#!/usr/bin/env bash

# <---> VARIABLES <--->
# colors
red="\033[01;31m"    # Issues/Errors
blue="\033[01;34m"   # Headings
green="\033[01;32m"  # Success
yellow="\033[01;33m" # Warnings/Information

# formatting
bold="\033[01;01m"   # Bold
underline="\e[4m"    # Undeline

# reset colors & formatting
reset="\033[00m"     # Normal

# script file name (without extension)
script_name=${0##*/}

# version
VERSION="1.0.0"

CONFIGURATIONS="/tmp/configurations"

#
# ---------------------------------------------------------------------------------------
#
# command prefix
CMD_PREFIX=

if [ ${UID} -gt 0 ] && [ -x "$(command -v sudo)" ]
then
	CMD_PREFIX="sudo"
elif [ ${UID} -gt 0 ] && [ ! -x "$(command -v sudo)" ]
then
	echo -e "\n${blue}[${red}-${blue}]${reset} failed!...\`sudo\` command not found!\n"
	exit 1
fi

# download command
DOWNLOAD_CMD=

if command -v >&- curl
then
	DOWNLOAD_CMD="curl -sL"
elif command -v >&- wget
then
	DOWNLOAD_CMD="wget --quiet --show-progres --continue --output-document=-"
else
	echo "\n${blue}[${red}-${blue}]${reset} failed!...could not find wget/cURL!\n"
	exit 1
fi

# git clone
git_clone() {
	if [ -d ${2} ]
	then
		git -C ${2} pull origin master &> /dev/null
	else
		git clone ${1} ${2} &> /dev/null
	fi
}

#
# ---------------------------------------------------------------------------------------
#
# Windows Subsystem for Linux (WSL)
isWSL=False

if uname -a | grep -q '^Linux.*Microsoft'
then
	isWSL=True
fi

# virtualization
# - is it a vm
# - if a vm, is it virtualbox
isVM=False
isVM_VMware=False
isVM_Virtualbox=False

if (${CMD_PREFIX} dmidecode | grep -iq vmware)
then
	isVM=True
	isVM_isVM_VMware=True
elif (${CMD_PREFIX} dmidecode | grep -iq virtualbox)
then
	isVM=True
	isVM_Virtualbox=True
fi

# distribution
DISTRIBUTION=

if [ -f /etc/os-release ]
then
	DISTRIBUTION=$(awk '/DISTRIB_ID=/' /etc/*-release | sed 's/DISTRIB_ID=//' | tr '[:upper:]' '[:lower:]')
fi

# has graphical user interface (GUI)
has_GUI=False

type Xorg > /dev/null 2>&1 && has_GUI=True

# desktop environment
DESKTOP_ENVIRONMENT=

if [ ${has_GUI} == True ]
then
	if [ "$XDG_CURRENT_DESKTOP" = "" ]
	then
		DESKTOP_ENVIRONMENT=$(echo "$XDG_DATA_DIRS" | sed 's/.*\(xfce\|kde\|gnome\).*/\1/')
	else
		DESKTOP_ENVIRONMENT=$(echo "$XDG_CURRENT_DESKTOP" | grep -Eoi 'xfce|kde|gnome|mate|cinnamon|lxde|jwm')
	fi

	DESKTOP_ENVIRONMENT=${DESKTOP_ENVIRONMENT,,}  # convert to lower case
fi

#
# ---------------------------------------------------------------------------------------
#

# <---> DISPLAY BANNER <--->

echo -e ${bold}${blue}"
 ____    ___       ____       _               
|  _ \  |_ _|     / ___|  ___| |_ _   _ _ __  
| |_) |  | |      \___ \ / _ \ __| | | | '_ \ 
|  __/   | |   _   ___) |  __/ |_| |_| | |_) |
|_| (_) |___| (_) |____/ \___|\__|\__,_| .__/ 
                                       |_|    
"${reset}

# <---> START <--->

echo -e "[${blue}>${reset}] START"

export DEBIAN_FRONTEND=noninteractive

# <---> UP(DATE|GRADE) <--->

echo -e "[${blue}>${reset}] up(date|grade)"

eval ${CMD_PREFIX} apt -qq update &> /dev/null \
	&& eval ${CMD_PREFIX} APT_LISTCHANGES_FRONTEND=none apt -o Dpkg::Options::="--force-confnew" -y -qq dist-upgrade --fix-missing &> /dev/null \
		|| echo -e "    [${red}-${reset}] failed!"


# <---> INSTALL ESSENTIALS <--->

echo -e "[${blue}>${reset}] install essentials"

eval ${CMD_PREFIX} apt install -y -qq git curl wget net-tools jq tree psmisc zip p7zip-full &> /dev/null

# <---> DOWNLOAD FONTS <--->

echo -e "[${blue}>${reset}] download fonts"

fonts_directory=${HOME}/.local/share/fonts

if [ ! -e "${fonts_directory}" ]
then
	mkdir -p ${fonts_directory}
fi

## Normal Fonts

echo -e "    [${blue}>${reset}] normal fonts"

### Victor Mono

printf "        [${blue}+${reset}] Victor Mono"
printf "\r"

name="VictorMono"
weights=(Light Regular Medium Bold)

missing_fonts=()

for weight in "${weights[@]}"
do
	font="${name}-${weight}.ttf"

	if [ ! -e "${fonts_directory}/${font}" ]
	then
		missing_fonts+=(${font})
	fi
done

if [ ${#missing_fonts[@]} -gt 0 ]
then
	if [ ! -e /tmp/VictorMonoAll.zip ]
	then
		eval ${DOWNLOAD_CMD} https://rubjo.github.io/victor-mono/VictorMonoAll.zip > /tmp/VictorMonoAll.zip;
	fi

	unzip -qd /tmp/VictorMonoAll /tmp/VictorMonoAll.zip; cp -f /tmp/VictorMonoAll/TTF/* ${HOME}/.local/share/fonts/
	echo
fi

echo -e "        [${green}*${reset}] Victor Mono"

## PATCHED FONTS [NERD FONT](https://www.nerdfonts.com/)

echo -e "    [${blue}>${reset}] patched fonts"

### Victor Mono Nerd Font

printf "        [${blue}+${reset}] Victor Mono Nerd Font"
printf "\r"

name="VictorMono"
weights=(Light Regular Medium Bold)

missing_fonts=()

for weight in "${weights[@]}"
do
	font="${name} ${weight} Nerd Font Complete.ttf"

	if [ ! -e "${fonts_directory}/${font}" ]
	then
		missing_fonts+=(${font})
	fi
done

if [ ${#missing_fonts[@]} -gt 0 ]
then
	for weight in "${weights[@]}"
	do
		font="$name $weight Nerd Font Complete.ttf"

		if [ ! -e "${fonts_directory}/${font}" ]
		then
			eval ${DOWNLOAD_CMD} https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/${name}/${weight}/complete/Victor%20Mono%20${weight}%20Nerd%20Font%20Complete.ttf > "${fonts_directory}/${font}";
		fi
	done
fi

echo -e "        [${green}*${reset}] Victor Mono Nerd Font"

# <---> CONFIGURATION FILES <--->

echo -e "[${blue}>${reset}] download configuration"

if [ ! -f ${CONFIGURATIONS}.7z ]
then
	rm -rf ${CONFIGURATIONS}.7z
fi

eval ${DOWNLOAD_CMD} https://raw.githubusercontent.com/enenumxela/P.I.Setup/main/configurations.7z > ${CONFIGURATIONS}.7z

7z x ${CONFIGURATIONS}.7z -o/tmp &> /dev/null

# --- SYSTEM <--->

echo -e "[${blue}>${reset}] System"

## Environment
if [ ${has_GUI} == True ]
then
	echo -e "    [${blue}>${reset}] Desktop Environment"

	## GNOME
	if [ ${DESKTOP_ENVIRONMENT} == "gnome" ]
	then
		printf "        [${blue}+${reset}] GNOME"
		printf "\r"
		# Dash to Dock
		gsettings set org.gnome.shell.extensions.dash-to-dock autohide true
		gsettings set org.gnome.shell.extensions.dash-to-dock dock-fixed false
		gsettings set org.gnome.shell.extensions.dash-to-dock intellihide true
		gsettings set org.gnome.shell.extensions.dash-to-dock click-action 'minimize'
		gsettings set org.gnome.shell.extensions.dash-to-dock dash-max-icon-size 40
		gsettings set org.gnome.shell.extensions.dash-to-dock dock-position 'BOTTOM'
		gsettings set org.gnome.shell.extensions.dash-to-dock extend-height false
		gsettings set org.gnome.shell favorite-apps "['virtualbox.desktop','firefox.desktop', 'org.gnome.Nautilus.desktop', 'org.gnome.Terminal.desktop']"
		gsettings set org.gnome.shell.extensions.dash-to-dock unity-backlit-items false
		gsettings set org.gnome.desktop.interface show-battery-percentage true
		gsettings set org.gnome.shell.extensions.dash-to-dock show-windows-preview true
		gsettings set org.gnome.shell.extensions.dash-to-dock show-favorites true
		gsettings set org.gnome.shell.extensions.dash-to-dock show-trash true
		gsettings set org.gnome.shell.extensions.dash-to-dock show-mounts true
		gsettings set org.gnome.shell.extensions.dash-to-dock animation-time 0.2
		gsettings set org.gnome.shell.extensions.dash-to-dock scroll-action cycle-windows
		# gsettings set org.gnome.shell.extensions.desktop-icons show-trash false
		# gsettings set org.gnome.shell.extensions.desktop-icons show-home false
		# gsettings set org.gnome.shell.extensions.desktop-icons icon-size 'small'
		# Top Bar
		gsettings set org.gnome.desktop.interface clock-show-weekday true
		gsettings set org.gnome.desktop.interface clock-show-seconds true
		gsettings set org.gnome.desktop.interface clock-show-date true
		# Mouse
		gsettings set org.gnome.desktop.peripherals.mouse natural-scroll false
		# Touchpad
		gsettings set org.gnome.desktop.peripherals.touchpad disable-while-typing true
		gsettings set org.gnome.desktop.peripherals.touchpad click-method 'fingers'
		gsettings set org.gnome.desktop.peripherals.touchpad tap-to-click  true
		gsettings set org.gnome.desktop.peripherals.touchpad two-finger-scrolling-enabled true
		# Windows Titlebar
		gsettings set org.gnome.desktop.wm.preferences action-double-click-titlebar toggle-maximize
		gsettings set org.gnome.desktop.wm.preferences action-middle-click-titlebar minimize
		gsettings set org.gnome.desktop.wm.preferences action-right-click-titlebar menu

		echo -e "        [${green}*${reset}] GNOME"
	fi
else
	echo -e "    [${blue}>${reset}] Desktop Environment (skipped)"
fi

## TERMINAL

echo -e "    [${blue}>${reset}] Terminal"

## SHELL

echo -e "        [${blue}>${reset}] Shell"

### ZSH

printf "            [${blue}+${reset}] ZSH"
printf "\r"

if [ ! -x "$(command -v zsh)" ]
then
	eval ${CMD_PREFIX} apt -y -qq install zsh &> /dev/null
fi

if [ "${SHELL}" != "$(which zsh)" ]
then
	eval ${CMD_PREFIX} chsh -s $(which zsh) ${USER}
fi

# ohmyzsh
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended &> /dev/null
# zsh-autosuggestions
git_clone "https://github.com/zsh-users/zsh-autosuggestions" "${HOME}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
# zsh-syntax-highlighting
git_clone "https://github.com/zsh-users/zsh-syntax-highlighting.git" "${HOME}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"

cp -rf ${CONFIGURATIONS}/.zshrc ${HOME}/.zshrc
cp -rf ${CONFIGURATIONS}/.zprofile ${HOME}/.zprofile

echo -e "            [${green}*${reset}] ZSH"

## EMULATOR

if [ ${has_GUI} == True ]
then
	echo -e "        [${blue}>${reset}] Emulator"

	### GNOME Terminal

	if [ ${DESKTOP_ENVIRONMENT} == "gnome" ]
	then
		printf "            [${blue}+${reset}] GNOME Terminal"
		printf "\r"

		GNOME_TERMINAL_PROFILE=$(gsettings get org.gnome.Terminal.ProfilesList default | awk -F \' '{print $2}')

		gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$GNOME_TERMINAL_PROFILE/ visible-name "Alex Munene's ..."

		# Text Appearance
		gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$GNOME_TERMINAL_PROFILE/ default-size-columns 80
		gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$GNOME_TERMINAL_PROFILE/ default-size-rows 24
		gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$GNOME_TERMINAL_PROFILE/ use-system-font false
		gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$GNOME_TERMINAL_PROFILE/ font 'VictorMono Nerd Font 10'

		# Cursor
		gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$GNOME_TERMINAL_PROFILE/ cursor-shape 'ibeam'
		gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$GNOME_TERMINAL_PROFILE/ cursor-blink-mode 'on'
		gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$GNOME_TERMINAL_PROFILE/ cursor-colors-set false

		echo -e "            [${green}*${reset}] GNOME Terminal"
	fi
else
	echo -e "        [${blue}>${reset}] Emulator (skipped)"
fi

## SESSION MANAGER

echo -e "        [${blue}>${reset}] Session Manager"

### TMUX

printf "            [${blue}+${reset}] TMUX"
printf "\r"

if [ ! -x "$(command -v tmux)" ]
then
	eval ${CMD_PREFIX} apt -y -qq install tmux &> /dev/null
fi

cp -rf ${CONFIGURATIONS}/.tmux.conf ${HOME}/.tmux.conf

directory="${HOME}/.tmux/plugins"; [ ! -d ${directory} ] && mkdir -p ${directory}

git_clone "https://github.com/tmux-plugins/tpm" "${directory}/tpm"

${directory}/tpm/bin/install_plugins &> /dev/null

echo -e "            [${green}*${reset}] TMUX"

##  Browsers

echo -e "    [${blue}>${reset}] Browsers"

### chrome

if [ ${isVM} == False ] && [ ${isWSL} == False ]
then
	printf "        [${blue}+${reset}] chrome"
	printf "\r"
	
	if [ ! -x "$(command -v google-chrome)" ]
	then
		eval ${CMD_PREFIX} apt -qq update &> /dev/null

		deb_file="/tmp/google-chrome-stable_current_amd64.deb"
		if [ ! -f ${deb_file} ]
		then
			wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -O ${deb_file} &> /dev/null
		fi

		eval ${CMD_PREFIX} apt -y -qq install ${deb_file} &> /dev/null
	fi

	echo -e "        [${green}*${reset}] chrome"
else
	echo -e "        [${green}*${reset}] chrome (skipped)"
fi

### firefox

if [ ${isWSL} == False ]
then
	printf "        [${blue}+${reset}] firefox"
	printf "\r"

	if [ ! -x "$(command -v firefox)" ]
	then
		eval ${CMD_PREFIX} apt -y -qq install firefox-esr ca-certificates libcanberra-gtk3-module &> /dev/null
	fi

	cp -rf ${CONFIGURATIONS}/.mozilla ${HOME}/.mozilla

	echo -e "        [${green}*${reset}] firefox"
else
	echo -e "        [${blue}+${reset}] firefox (skipped)"
fi

# <---> SYSTEM <--->
# <---> VIRTUALIZATION <--->

echo -e "[${blue}>${reset}] virtualization"

if [ ${has_GUI} == True ]
then
	printf "    [${blue}+${reset}] virtualbox"
	printf "\r"

	if [ ${isVM} == False ]
	then
		#--- install virtualbox
		[ ! -x "$(command -v virtualbox)" ] && {
			eval ${CMD_PREFIX} apt install -y -qq virtualbox &> /dev/null
		}

		eval ${CMD_PREFIX} adduser ${USER} vboxusers &> /dev/null

		# --- install virtualbox extension pack
		#export DEBIAN_FRONTEND=noninteractive
		#sudo apt -y -qq install virtualbox-ext-pack &> /dev/null
	else
		if [ ${isVM_Virtualbox} == True ]
		then
			eval ${CMD_PREFIX} apt install -y -qq virtualbox-guest-x11 &> /dev/null
		fi
	fi

	echo -e "    [${green}*${reset}] virtualbox"
fi

# <---> VIRTUALIZATION <--->
# <---> CONTAINERIZATION <--->

if [ ${isWSL} == False ]
then
	echo -e "[${blue}>${reset}] containerization"

	printf "    [${blue}+${reset}] docker & docker compose"
	printf "\r"

	if [ ! -x "$(command -v docker)" ]
	then
		eval ${CMD_PREFIX} apt remove docker docker-engine docker.io containerd runc &> /dev/null
		
		eval ${CMD_PREFIX} apt update &> /dev/null

		eval ${CMD_PREFIX} apt install -y -qq \
			apt-transport-https \
			ca-certificates \
			curl \
			gnupg \
			lsb-release &> /dev/null

		if [ ! -d /etc/apt/keyrings ]
		then
			eval ${CMD_PREFIX} mkdir -p /etc/apt/keyrings
		fi

		if [ "${DISTRIBUTION}" == "ubuntu" ]
		then
 			eval ${DOWNLOAD_CMD} https://download.docker.com/linux/ubuntu/gpg | eval ${CMD_PREFIX} gpg --dearmor -o /etc/apt/keyrings/docker.gpg

			echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | eval ${CMD_PREFIX} tee /etc/apt/sources.list.d/docker.list > /dev/null
		else
			eval ${DOWNLOAD_CMD} https://download.docker.com/linux/debian/gpg | eval ${CMD_PREFIX} gpg --dearmor -o /etc/apt/keyrings/docker.gpg

			echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian buster stable" | eval ${CMD_PREFIX} tee /etc/apt/sources.list.d/docker.list > /dev/null
		fi

		eval ${CMD_PREFIX} apt update &> /dev/null

		eval ${CMD_PREFIX} apt install -y -qq docker-ce docker-ce-cli containerd.io docker-compose-plugin &> /dev/null
	fi

	# > Manage Docker as a non-root user
	# > create the docker group.
	eval ${CMD_PREFIX} groupadd docker &> /dev/null
	# > add your user to the docker group.
	eval ${CMD_PREFIX} usermod -aG docker $USER &> /dev/null
	# >  activate the changes to groups
	# newgrp docker 

	echo -e "    [${green}*${reset}] docker & docker compose"
fi

# <---> CONTAINERIZATION <--->

echo -e "[${blue}>${reset}] Development"

echo -e "    [${blue}>${reset}] version control"

printf "        [${blue}+${reset}] git"
printf "\r"
if [ ! -x "$(command -v git)" ]
then
	eval ${CMD_PREFIX} apt install -y -qq git &> /dev/null
fi

if [ -x "$(command -v git)" ]
then
	if [ "${GIT_USERNAME}" != "" ]
	then
		git config --global user.name "${GIT_USERNAME}"
	fi
	if [ "${GIT_USEREMAIL}" != "" ]
	then
		git config --global user.email "${GIT_USEREMAIL}"
	fi
	# Your Editor
	git config --global core.editor vim
	# Your default branch name
	git config --global init.defaultBranch main

	if [ "${GITHUB_USERNAME}" != "" ] && [ "${GITHUB_PERSONAL_ACCESS_TOKEN}" != "" ]
	then
		git config --global url."https://${GITHUB_USERNAME}:${GITHUB_PERSONAL_ACCESS_TOKEN}@github.com/".insteadOf "https://github.com/"
	fi
fi
echo -e "        [${green}*${reset}] git"

echo -e "    [${blue}>${reset}] text editors|IDE"

printf "        [${blue}+${reset}] VIM"
printf "\r"
if [ ! -x "$(command -v vim)" ]
then
	eval ${CMD_PREFIX} apt install -y -qq vim &> /dev/null
fi

directory="${HOME}/.vim"
[ ! -d ${directory}/colors ] && mkdir -p ${directory}/colors
[ ! -d ${directory}/bundle ] && mkdir -p ${directory}/bundle
[ ! -d ${directory}/autoload ] && mkdir -p ${directory}/autoload

# {{ PLUGIN MANAGER

[ -e "${directory}/autoload/pathogen.vim" ] && rm -rf ${directory}/autoload/pathogen.vim
eval ${DOWNLOAD_CMD} https://tpo.pe/pathogen.vim > ${directory}/autoload/pathogen.vim

# }}
# {{ THEME

[ -e "${directory}/autoload/onedark.vim" ] && {
	rm -rf ${directory}/autoload/onedark.vim
}
eval ${DOWNLOAD_CMD} https://raw.githubusercontent.com/joshdick/onedark.vim/master/autoload/onedark.vim > ${directory}/autoload/onedark.vim

[ -e "${directory}/colors/onedark.vim" ] && {
	rm -rf ${directory}/colors/onedark.vim
}
eval ${DOWNLOAD_CMD} https://raw.githubusercontent.com/joshdick/onedark.vim/master/colors/onedark.vim > ${directory}/colors/onedark.vim

[ ! -e "${directory}/autoload/airline/themes" ] && {
	mkdir -p ${directory}/autoload/airline/themes
}
[ -e "${directory}/autoload/airline/themes/onedark.vim" ] && {
	rm -rf ${directory}/autoload/airline/themes/onedark.vim
}
eval ${DOWNLOAD_CMD} https://raw.githubusercontent.com/joshdick/onedark.vim/master/autoload/airline/themes/onedark.vim > ${directory}/autoload/airline/themes/onedark.vim

# }}

git_clone "https://github.com/preservim/nerdtree.git" "${directory}/bundle/nerdtree"
git_clone "https://github.com/ryanoasis/vim-devicons.git" "${directory}/bundle/vim-devicons"
git_clone "https://github.com/vim-airline/vim-airline.git" "${directory}/bundle/vim-airline"
git_clone "https://github.com/airblade/vim-gitgutter.git" "${directory}/bundle/vim-gitgutter"
git_clone "https://github.com/Xuyuanp/nerdtree-git-plugin.git" "${directory}/bundle/nerdtree-git-plugin"
git_clone "https://github.com/tpope/vim-fugitive.git" "${directory}/bundle/vim-fugitive"

cp -rf ${CONFIGURATIONS}/.vimrc ${HOME}/.vim/vimrc

echo -e "        [${green}*${reset}] VIM"

if [ ${has_GUI} == True ]
then
	printf "        [${blue}+${reset}] visual studio code"
	printf "\r"

	if [ ! -x "$(command -v code)" ]
	then
		eval ${DOWNLOAD_CMD} https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > /tmp/packages.microsoft.gpg

		eval ${CMD_PREFIX} install -o root -g root -m 644 /tmp/packages.microsoft.gpg /usr/share/keyrings/

		if [ ! -f /etc/apt/sources.list.d/vscode.list ]
		then
			echo "deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main" | eval ${CMD_PREFIX} tee /etc/apt/sources.list.d/vscode.list > /dev/null
		fi

		eval ${CMD_PREFIX} apt update -y -qq &> /dev/null && eval ${CMD_PREFIX} apt install -y -qq code &> /dev/null
	fi

	if [ -x "$(command -v code)" ]
	then
		# extensions
		vscode_extensions=(
			golang.go # go(golang) support
			eamodio.gitlens
			ms-python.python # python support
			mhutchie.git-graph
			redhat.vscode-yaml
			dbaeumer.vscode-eslint
			james-yu.latex-workshop
			pkief.material-icon-theme # icons
			enenumxela.signed-dark-pro # theme
			aaron-bond.better-comments
			ms-azuretools.vscode-docker
			coenraads.bracket-pair-colorizer
			christian-kohler.path-intellisense
			shd101wyy.markdown-preview-enhanced
			)
		missing_vscode_extensions=()

		for i in "${vscode_extensions[@]}"
		do
			if [ "$(code --list-extensions | grep '${i}')" == "" ]
			then
				missing_vscode_extensions+=(${i})
			fi
		done

		if [ ${#missing_vscode_extensions[@]} -gt 0 ]
		then
			for i in "${missing_vscode_extensions[@]}"
			do
				code --install-extension ${i} &> /dev/null
			done
		fi

		# configuration
		if [ ! -d ${HOME}/.config/Code/User ]
		then
			mkdir -p ${HOME}/.config/Code/User
		fi

		cp -rf ${CONFIGURATIONS}/vscode/settings.json ${HOME}/.config/Code/User/settings.json
	fi

	echo -e "        [${green}*${reset}] visual studio code"
else
	echo -e "        [${green}*${reset}] visual studio code (skipped)"
fi

echo -e "    [${blue}>${reset}] language|frameworks|runtime"

printf "        [${blue}+${reset}] golang"
printf "\r"
if [ ! -x "$(command -v go)" ]
then
	GO_VERSION=1.18.2

	eval ${DOWNLOAD_CMD} https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz > /tmp/go${GO_VERSION}.linux-amd64.tar.gz

	eval ${CMD_PREFIX} tar -xzf /tmp/go${GO_VERSION}.linux-amd64.tar.gz -C /usr/local
fi
(grep -q "export PATH=\$PATH:/usr/local/go/bin" ~/.profile) || {
	echo "export PATH=\$PATH:/usr/local/go/bin" >> ~/.profile
}
(grep -q "export PATH=\$PATH:\${HOME}/go/bin" ~/.profile) || {
	echo "export PATH=\$PATH:\${HOME}/go/bin" >> ~/.profile
}
source ~/.profile
echo -e "        [${green}*${reset}] golang"

## NODEJS

printf "        [${blue}+${reset}] node (nvm)"
printf "\r"
if [ ! -x "$(command -v nvm)" ]
then
	eval ${DOWNLOAD_CMD} https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash - &> /dev/null
	

	export NVM_DIR="$HOME/.nvm"
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
	[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

	source ${HOME}/.bashrc

	nvm install node &> /dev/null
fi
echo -e "        [${green}*${reset}] node (nvm)"

printf "        [${blue}+${reset}] python3"
printf "\r"
if [ ! -x "$(command -v python3)" ] || [ ! -x "$(command -v pip3)" ]
then
	eval ${CMD_PREFIX} apt install -y -qq python3 python3-dev python3-pip python3-venv &> /dev/null
fi
echo -e "        [${green}*${reset}] python3"

# if [ ${isVM} == False ] && [ ${isWSL} == False ]
# then
# 	printf "        [${blue}+${reset}] latex"
# 	printf "\r"
# 	eval ${CMD_PREFIX} apt install -y -qq texlive-latex-extra latexmk texlive-extra-utils &> /dev/null
# 	echo -e "        [${green}*${reset}] latex"
# else
# 	echo -e "        [${green}*${reset}] latex (skipped)"
# fi

echo -e "[${blue}>${reset}] system clean up"

echo -e "    [${blue}>${reset}] auto(remove|clean)"

for task in autoremove autoclean clean
do
	printf "        [${blue}+${reset}] ${task}"
	printf "\r"
	eval ${CMD_PREFIX} apt ${task} -y -qq &> /dev/null
	echo -e "        [${green}*${reset}] ${task}"
done

echo -e "    [${blue}>${reset}] Files"

printf "        [${blue}+${reset}] remove configurations"
printf "\r"
rm -rf ${CONFIGURATIONS} ${CONFIGURATIONS}.7z
echo -e "        [${green}*${reset}] remove configurations"

printf "        [${blue}+${reset}] shred history files"
printf "\r"
eval ${CMD_PREFIX} find ${HOME} -type f -name ".*_history" -exec shred -u {} \; &> /dev/null
echo -e "        [${green}*${reset}] shred history files"

echo -e "[${blue}>${reset}] END\n"